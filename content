import emailjs from "@emailjs/browser";
import { Canvas } from "@react-three/fiber";
import { Suspense, useRef, useState } from "react";

import { Fox } from "../models/Fox";
import useAlert from "../hooks/useAlert";
import Loader  from "../components/Loader";

const Contact = () => {
  const formRef = useRef();
  const [form, setForm] = useState({ name: "", email: "", message: "" });
  const { alert, showAlert, hideAlert } = useAlert();
  const [loading, setLoading] = useState(false);
  const [currentAnimation, setCurrentAnimation] = useState("idle");

  const handleChange = ({ target: { name, value } }) => {
    setForm({ ...form, [name]: value });
  };

  const handleFocus = () => setCurrentAnimation("walk");
  const handleBlur = () => setCurrentAnimation("idle");

  const handleSubmit = (e) => {
    e.preventDefault();
    setLoading(true);
    setCurrentAnimation("hit");

    emailjs
    .sendForm(
      "service_n26ybdi",
      "template_4iynnma",
      formRef.current,
      "PGO_hsZVWM4rTguFv"
    )
      .then(
        () => {
          setLoading(false);
          showAlert({
            show: true,
            text: "Will get back soon! ðŸ˜ƒ",
            type: "success",
          });

          setTimeout(() => {
            hideAlert(false);
            setCurrentAnimation("idle");
            setForm({
              name: "",
              email: "",
              message: "",
            });
          }, [3000]);
        },
        (error) => {
          setLoading(false);
          console.error(error);
          setCurrentAnimation("idle");

          showAlert({
            show: true,
            text: "Message not received ðŸ˜¢",
            type: "danger",
          });
        }
      );
  };

  return (
    <section className='relative flex lg:flex-row flex-col max-container'>
      {alert.show && <alert {...alert} />}

      <div className='flex-1 min-w-[50%] flex flex-col'>
      <h1 className="head-text text-[#4e9dd2]">Let's Connect</h1>

        <form
          ref={formRef}
          onSubmit={handleSubmit}
          className='w-full flex flex-col gap-7 mt-14'
        >
          <label className='text-white font-semibold'>
            Name
            <input
              type='text'
              name='name'
              className='input'
              placeholder='Your Name'
              required
              value={form.name}
              onChange={handleChange}
              onFocus={handleFocus}
              onBlur={handleBlur}
            />
          </label>
          <label className='text-white font-semibold'>
            Email
            <input
              type='email'
              name='email'
              className='input'
              placeholder='abc@gmail.com'
              required
              value={form.email}
              onChange={handleChange}
              onFocus={handleFocus}
              onBlur={handleBlur}
            />
          </label>
          <label className='text-white font-semibold'>
            Your Message
            <textarea
              name='message'
              rows='4'
              className='textarea'
              placeholder='Drop your message here...'
              value={form.message}
              onChange={handleChange}
              onFocus={handleFocus}
              onBlur={handleBlur}
            />
          </label>

          <button
            type='submit'
            disabled={loading}
            className='btn'
            onFocus={handleFocus}
            onBlur={handleBlur}
          >
            {loading ? "Sending..." : "Submit"}
          </button>
        </form>
      </div>

      <div className='lg:w-1/2 w-full lg:h-auto md:h-[550px] h-[350px]'>
        <Canvas
          camera={{
            position: [0, 0, 5],
            fov: 75,
            near: 0.1,
            far: 1000,
          }}
        >
          <directionalLight position={[0, 0, 1]} intensity={2.5} />
          <ambientLight intensity={1} />
          <pointLight position={[5, 10, 0]} intensity={2} />
          <spotLight
            position={[10, 10, 10]}
            angle={0.15}
            penumbra={1}
            intensity={2}
          />

          <Suspense fallback={<Loader />}>
            <Fox
              currentAnimation={currentAnimation}
              position={[0.5, 0.35, 0]}
              rotation={[12.629, -0.6, 0]}
              scale={[0.5, 0.5, 0.5]}
            />
          </Suspense>
        </Canvas>
      </div>
    </section>
  );
};

export default Contact;





// alien.jsx

import { useAnimations, useGLTF } from '@react-three/drei'
import React, { useEffect, useRef } from 'react'
import alienScene from '../assets/alien.glb'
import { useFrame } from '@react-three/fiber'

const Alien = () => {
    const { scene, animations } = useGLTF(alienScene)
    const alienRef = useRef();
    const { actions } = useAnimations(animations, alienRef)

    useEffect(() => {
      Object.values(actions).forEach((action) => action.stop());
  
      if (actions[currentAnimation]) {
        actions[currentAnimation].play();
      }
    }, [actions, currentAnimation]);

    useFrame(({ clock, viewport }) => {
        const { width } = viewport;

        // Make the UFO float near the top of the screen and across the screen
        alienRef.current.position.x = Math.sin(clock.elapsedTime * 0.2) * 2; // Adjust the multiplier as needed
        alienRef.current.position.y = Math.cos(clock.elapsedTime * 0.6) * 0.5;
        alienRef.current.position.z = Math.sin(clock.elapsedTime * 0.4) * 1.2;
        
        // Set the UFO's x position closer to the origin if the viewport width is less than 768px
        if (width < 768) {
            alienRef.current.position.x = -2; // Adjust the position as needed
        } else {
            alienRef.current.position.x = -5; // Default position if the viewport width is greater than or equal to 768px
        }
    });

    return (
        <mesh position={[-5,40,-3]} scale={[0.3, 0.3, 0.23]} ref={alienRef}>
            <primitive object={scene} />
        </mesh>
    )
}

export default Alien;

